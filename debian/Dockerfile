# Multi-stage build, uses a base debian image to run debootstrap to build a fully transparent minimal debian image.

# While trying to understand how official Debian images are built, I found the following two github
# repos. Docker images are generated from #1, which has committed rootfs.tar.xz files. Those files
# are generated by scripts in #2.
# 1: https://github.com/debuerreotype/docker-debian-artifacts/tree/dist-amd64
# 2: https://github.com/debuerreotype/debuerreotype


# Use the official Debian image for the builder.
# TODO: migrate to my own image once things are bootstrapped.
FROM debian:stable-slim AS builder

# Upgrade the base image
# Note: We don't need the usual && chain of cleanup code since the builder image is discarded
RUN apt-get update
RUN apt-get dist-upgrade -y

# Install debootstrap
RUN apt-get install -y --no-install-recommends debootstrap

# Create a minimal debian image, excluding all unnecessary packages
RUN debootstrap --variant=minbase bookworm /rootfs http://deb.debian.org/debian/

# Reduce clutter before exporting the rootfs
# du show sizes of: archives 29MB, lists 48MB, locale 33MB, doc 8.7MB, man 5.3MB
RUN rm -rf /rootfs/var/cache/apt/archives /rootfs/var/lib/apt/lists/*
RUN rm -fr /rootfs/usr/share/locale/*
RUN rm -rf /rootfs/usr/share/doc/*
RUN rm -fr /rootfs/usr/share/man/man*/*

# The above removed files can be restored if needed using these in a downstream Dockerfile:
#   apt-get install --reinstall $(dpkg -S /usr/share/locale | cut -d: -f1 | sort -u)
#   apt-get install --reinstall $(dpkg -S /usr/share/doc | cut -d: -f1 | sort -u)
#   apt-get install --reinstall $(dpkg -S /usr/share/man | cut -d: -f1 | sort -u)

# ----------------------------------------

    # Now to create a minimal image from scratch
FROM scratch

# Copy the minimal debian image
COPY --from=builder /rootfs /

# Set the default command
CMD ["/bin/bash"]
